#------------------------------------------------------------------------------------
# Sample Deployment Template
#------------------------------------------------------------------------------------
AWSTemplateFormatVersion: '2010-09-09'


Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Application Environment Configuration
      Parameters:
      - pNetworkStack
      - pAppName
      - pAppEnvironmentRole
      - pServerCount
      - pKeyName
      - pSshLocation
      - pInstanceType
      
    ParameterLabels:
      pNetworkStack:
        default: Cloud Formation Network Stack Name
      pAppName:
        default: Application Name
      pAppEnvironmentRole:
        default: Application Environment Role
      pServerCount:
        default: Number of EC2 Instances
      pKeyName:
        default: SSH Key Name
      pSshLocation:
        default: Allowed SSH Client CIDR Block
      pInstanceType:
        default: EC2 Instance Type
        
Parameters:

  pNetworkStack:
    Description: Name of network Cloud Formation stack to which this workload is to be deployed
    Type: String

  pAppName:
    Description: Name of the application
    Type: String
    Default: 'Test Workload'

  pAppEnvironmentRole:
    Description: Role of this application environment instance
    Type: String
    Default: 'Dev1'

  pServerCount:
    Description: Number of Amazon EC2 instances to launch for the web server
    Type: Number
    Default: '1'

  pKeyName:
    Description: Name of an EC2 KeyPair to enable SSH access to the instance.
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  pSshLocation:
    Description: ' The IP address range that can be used to access the web server using SSH.'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  pInstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.micro
      - t2.small
      - t2.medium
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.

Mappings:

  mAWSInstanceType2Arch:
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64

  mAWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-1ecae776
      HVMG2: ami-8c6b40e4
    us-west-2:
      HVM64: ami-e7527ed7
      HVMG2: ami-abbe919b
    us-west-1:
      HVM64: ami-d114f295
      HVMG2: ami-f31ffeb7

Resources:

  rAlb:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      SecurityGroups:
        - !Ref rAlbSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub "${pNetworkStack}-Tier1Subnet1"
        - Fn::ImportValue: !Sub "${pNetworkStack}-Tier1Subnet2"

  rAlbSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Public ALB security group with HTTP access on port 80 from the Internet
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      VpcId:
          Fn::ImportValue: !Sub "${pNetworkStack}-VpcId"

  rHttpListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref rAlb
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref rTargetGroup

  rTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      VpcId:
          Fn::ImportValue: !Sub "${pNetworkStack}-VpcId"
      HealthCheckIntervalSeconds: 15
      HealthCheckTimeoutSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299

  rAsg:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      MinSize: '1'
      MaxSize: '4'
      DesiredCapacity: !Ref pServerCount
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${pNetworkStack}-Tier1Subnet1"
        - Fn::ImportValue: !Sub "${pNetworkStack}-Tier1Subnet2"
      TargetGroupARNs:
        - !Ref rTargetGroup
      LaunchConfigurationName: !Ref rLaunchConfig
      Tags:
        - Key: Name
          Value: Sample Workload
          PropagateAtLaunch: true

  rSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId:
          Fn::ImportValue: !Sub "${pNetworkStack}-VpcId"
      GroupDescription: Allow access from HTTP and SSH traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref rAlbSecurityGroup
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref pSshLocation

  rLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      InstanceType: !Ref pInstanceType
      ImageId: !FindInMap 
        - mAWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - mAWSInstanceType2Arch
          - !Ref pInstanceType
          - Arch
      KeyName: !Ref pKeyName
      IamInstanceProfile: !Ref rInstanceProfile
      SecurityGroups:
        - !Ref rSecurityGroup
      AssociatePublicIpAddress: 'true'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum install -y aws-cfn-bootstrap
              
          # Install the files and packages from the metadata
          /opt/aws/bin/cfn-init -v \
              --stack ${AWS::StackName} \
              --resource rLaunchConfig \
              --configsets All \
              --region ${AWS::Region}
              
          # Signal the status from cfn-init
          /opt/aws/bin/cfn-signal -e $? \
              --stack ${AWS::StackName} \
              --resource rAsg \
              --region ${AWS::Region}

    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          All:
            - ConfigureCloudWatchMetrics
            - ConfigureCloudWatchLogsAgent
            - ConfigureSampleWorkload
        ConfigureCloudWatchMetrics:
          packages:
            yum:
              perl-Switch: []
              perl-DateTime: []
              perl-Sys-Syslog: []
              perl-LWP-Protocol-https: []
          sources:
            /home/ec2-user: >-
              https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.1.zip
          files:
            /home/ec2-user/crontab:
              content: !Sub |
                */1 * * * * ~/aws-scripts-mon/mon-put-instance-data.pl --aws-iam-role=${rRole} --mem-used --memory-units=megabytes --mem-util --disk-space-util --disk-space-used --disk-space-avail --disk-path=/
              mode: '000600'
              owner: ec2-user
              group: ec2-user
          commands:
            01_YumUpdateMonitoring:
              command: yum update -y
            02_MonitoringCron:
              command: >-
                chmod +x /home/ec2-user/aws-scripts-mon/*.pl && crontab -u
                ec2-user /home/ec2-user/crontab && rm /home/ec2-user/crontab
        ConfigureCloudWatchLogsAgent:
          packages:
            yum:
              awslogs: []
          files:
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file= /var/awslogs/state/agent-state

                [/var/log/cloud-init.log]
                file = /var/log/cloud-init.log
                log_group_name = ${rCloudWatchLogsAgentGroup}
                log_stream_name = {instance_id}/cloud-init.log
                datetime_format =

                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_group_name = ${rCloudWatchLogsAgentGroup} 
                log_stream_name = {instance_id}/cloud-init-output.log
                datetime_format = 

                [/var/log/cfn-init.log]
                file = /var/log/cfn-init.log
                log_group_name = ${rCloudWatchLogsAgentGroup}
                log_stream_name = {instance_id}/cfn-init.log
                datetime_format = 

                [/var/log/cfn-hup.log]
                file = /var/log/cfn-hup.log
                log_group_name = ${rCloudWatchLogsAgentGroup}
                log_stream_name = {instance_id}/cfn-hup.log
                datetime_format = 

                [/var/log/cfn-wire.log]
                file = /var/log/cfn-wire.log
                log_group_name = ${rCloudWatchLogsAgentGroup}
                log_stream_name = {instance_id}/cfn-wire.log
                datetime_format = 
              mode: '000444'
              owner: root
              group: root
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
              mode: '000444'
              owner: root
              group: root
          commands:
            create-awslogs-state-file:
              command: 'mkdir -p /var/awslogs/state'
          services:
            sysvinit:
              awslogs:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - '/etc/awslogs/awslogs.conf'
        ConfigureSampleWorkload:
          packages:
            yum:
              httpd: []
          files:
            /var/www/html/index.html:
              content: |
                <h1>Congratulations, you have successfully launched the AWS CloudFormation sample.</h1>
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'

  rRole: 
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Sid: ""
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "root"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action:
                  - "cloudwatch:putMetricData"
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:DescribeLogStreams"
                  - "logs:PutLogEvents"
                Resource: "*"

  rCloudWatchLogsAgentGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties: 
      LogGroupName: !Sub '${AWS::StackName}-cloud-watch-logs-agent'
      RetentionInDays: 1

  rInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles:
        - !Ref rRole

Outputs:

  oUrl:
    Value: !GetAtt 
      - rAlb
      - DNSName
    Description: Newly created application URL
