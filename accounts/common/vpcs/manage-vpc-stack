#!/usr/bin/env python

from __future__ import print_function
import boto3
import botocore
import time
import sys
import argparse

'''AWS VPCs Manage a VPC

This module manages a VPC based on lifeycle operation and CloudFormation stack parameter

'''

__version__ = '0.1'
__author__ = '@author@'
__email__ = '@email@'


def create_account(
        account_name,
        account_email,
        account_role,
        ou_name,
        scp_name,
        access_to_billing,
        region):

    '''
        Create a new AWS account and add it to an organization
    '''

    client = boto3.client('organizations')

    # See if account exists
    token = None
    paginator = client.get_paginator('list_accounts')
    page_iterator = paginator.paginate(
        PaginationConfig={
            'StartingToken': token
        }
    )
   
    account_id = None 
    for page in page_iterator:
        for account in page['Accounts']:
            print(account['Name'])
            if account['Name'] == account_name:
                print("Account already exists: " + account_name + " " + account["Id"])
                account_id = account["Id"]
                break
    
    if account_id is None:
        try:
            create_account_response = client.create_account(
                Email=account_email,
                AccountName=account_name,
                RoleName=account_role,
                IamUserAccessToBilling=access_to_billing)
                
        except botocore.exceptions.ClientError as e:
            print(e)
            sys.exit(1)

        time.sleep(10)

        account_status = 'IN_PROGRESS'
        while account_status == 'IN_PROGRESS':
            create_account_status_response = client.describe_create_account_status(
                CreateAccountRequestId=create_account_response.get('CreateAccountStatus').get('Id'))
            print("Create account status "+str(create_account_status_response))
            account_status = create_account_status_response.get('CreateAccountStatus').get('State')
        if account_status == 'SUCCEEDED':
            account_id = create_account_status_response.get('CreateAccountStatus').get('AccountId')
        elif account_status == 'FAILED':
            print("Account creation failed: " + create_account_status_response.get('CreateAccountStatus').get('FailureReason'))
            sys.exit(1)
            
    root_id = client.list_roots().get('Roots')[0].get('Id')
        
    parents = client.list_parents(
        ChildId=account_id
    )
    parent_id = parents.get('Parents')[0].get('Id')

    if ou_name is None:
        # Ensure account is moved to Root if not already there
        if root_id != parent_id:
            move_account(account_id, parent_id, root_id, region)
            
    else:
        # Move account to the specified OU
        ou_id = get_ou_id(ou_name, region)
       
        if ou_id != parent_id: 
            move_account(account_id, parent_id, ou_id, region)

    if scp_name is not None:
        attach_scp(account_id, scp_name, region) 

    return account_id


def move_account(account_id, parent_id, destination_id, region):

    client = boto3.client('organizations', region_name=region)
       
    try:
        client.move_account(
            AccountId=account_id,
            SourceParentId=parent_id,
            DestinationParentId=destination_id)
               
    except Exception as ex:
        template = "An exception of type {0} occurred. Arguments:\n{1!r} "
        message = template.format(type(ex).__name__, ex.args)
        print(message)

    return


def get_ou_id(name, region):

    client = boto3.client('organizations', region_name=region)
   
    try:
        ou_data = get_root_ou(region) 
        root_ou_id = ou_data["Id"]
    
        response = client.list_organizational_units_for_parent(ParentId=root_ou_id)
        
    except botocore.exceptions.ClientError as e:
        print(e)
        sys.exit(1)    
    
    ous = response.get('OrganizationalUnits')
    
    for x in ous:
        if x['Name'] == name:
            ou_id = x['Id']
    
    if not ou_id:
       raise ValueError('Cannot find OU name: ', name)
    
    return ou_id


def get_root_ou(region):

    client = boto3.client('organizations', region_name=region)
   
    try:
        ou_data = client.list_roots()['Roots'][0]
        
    except botocore.exceptions.ClientError as e:
        print(e)
        sys.exit(1)    
    
    return ou_data
    

def assume_role(account_id, account_role):

    '''
        Assume admin role within the newly created account and return credentials
    '''

    sts_client = boto3.client('sts')
    role_arn = 'arn:aws:iam::' + account_id + ':role/' + account_role

    # Call the assume_role method of the STSConnection object and pass the role
    # ARN and a role session name.

    assuming_role = True
    while assuming_role is True:
        try:
            assuming_role = False
            assumedRoleObject = sts_client.assume_role(
                RoleArn=role_arn,
                RoleSessionName="NewAccountRole"
            )
        except botocore.exceptions.ClientError as e:
            assuming_role = True
            print(e)
            print("Retrying...")
            time.sleep(10)

    # From the response that contains the assumed role, get the temporary
    # credentials that can be used to make subsequent API calls
    return assumedRoleObject['Credentials']


def get_template(template_file):

    '''
        Read a template file and return the contents
    '''

    print("Reading resources from " + template_file)
    f = open(template_file, "r")
    cf_template = f.read()
    
    return cf_template


def deploy_resources(
    credentials,
    template,
    stack_name,
    stack_region,
    admin_username,
    admin_password):

    '''
        Create a CloudFormation stack of resources within the new account
    '''

    datestamp = time.strftime("%d/%m/%Y")
    client = boto3.client('cloudformation',
                          aws_access_key_id=credentials['AccessKeyId'],
                          aws_secret_access_key=credentials['SecretAccessKey'],
                          aws_session_token=credentials['SessionToken'],
                          region_name=stack_region)
    print("Creating stack " + stack_name + " in " + stack_region)

    creating_stack = True
    while creating_stack is True:
        try:
            creating_stack = False
            create_stack_response = client.create_stack(
                StackName=stack_name,
                TemplateBody=template,
                Parameters=[
                    {
                        'ParameterKey' : 'pAdminUserName',
                        'ParameterValue' : admin_username
                    },
                    {
                        'ParameterKey' : 'pAdminUserPassword',
                        'ParameterValue' : admin_password
                    }
                ],
                NotificationARNs=[],
                Capabilities=[
                    'CAPABILITY_NAMED_IAM',
                ],
                OnFailure='ROLLBACK',
                Tags=[
                    {
                        'Key': 'ManagedResource',
                        'Value': 'True'
                    },
                    {
                        'Key': 'DeployDate',
                        'Value': datestamp
                    }
                ]
            )
        except botocore.exceptions.ClientError as e:
            creating_stack = True
            print(e)
            print("Retrying...")
            time.sleep(10)

    stack_building = True
    print("Stack creation in process...")
    print(create_stack_response)
    while stack_building is True:
        event_list = client.describe_stack_events(StackName=stack_name).get("StackEvents")
        stack_event = event_list[0]

        if (stack_event.get('ResourceType') == 'AWS::CloudFormation::Stack' and
           stack_event.get('ResourceStatus') == 'CREATE_COMPLETE'):
            stack_building = False
            print("Stack construction complete.")
        elif (stack_event.get('ResourceType') == 'AWS::CloudFormation::Stack' and
              stack_event.get('ResourceStatus') == 'ROLLBACK_COMPLETE'):
            stack_building = False
            print("Stack construction failed.")
            sys.exit(1)
        else:
            print(stack_event)
            print("Stack building . . .")
            time.sleep(10)

    stack = client.describe_stacks(StackName=stack_name)
    
    return stack


def main(arguments):

    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter)
        
    parser.add_argument('--stack_name') 
    parser.add_argument('--stack_name') 
    parser.add_argument('--template_file')
    parser.add_argument('--parameter_file')
    parser.add_argument('--region',
                        default='us-east-1')
    parser.add_argument('--account_name') 
    parser.add_argument('--account_role',
                        default='OrganizationAccountAccessRole')
    args = parser.parse_args(arguments)

    account_id = get_account_id(
        args.account_name,
        args.region)
   
    credentials = assume_role(account_id, args.account_role)
        
    print("Deploying resources from " + args.template_file + " as " + args.stack_name + " in " + args.region)
        
    template = get_template(args.template_file)
    stack = deploy_stack(
        credentials,
        args.stack_name,
        template,
        parameters,
        args.region)
    print(stack)
    print("Resources deployed for account " + account_id + " (" + args.account_email + ")")

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
