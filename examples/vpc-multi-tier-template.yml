# (c) 2017 Amazon Web Services, Inc. or its affiliates. All Rights Reserved. This AWS Content is provided subject to the terms of the AWS Customer
# Agreement available at https://aws.amazon.com/agreement/ or other written agreement between Customer and Amazon Web Services, Inc.
AWSTemplateFormatVersion: '2010-09-09'
Description: This is the CloudFormation script for a 2 or 3 tier Dev, Test, UAT, Prod (blue/green) VPC with 2,3,4 Public Subnets, 2,3,4,6,8 Private Subnets
  with a NatGateway.
Metadata: # Metadata Section
  AWS::CloudFormation::Interface:
    ParameterGroups: # Parameter Groups
    - Label: # Environment Configuration
        default: Environment Configuration
      Parameters: # Label Parameters
      - pEnvironmentName
      - pEnvironmentVersion
    - Label: # VPC Configuration
        default: VPC Configuration
      Parameters: # Label Parameters
      - pVpcCidr
      - pNumTiers
      - pNumAzs
    - Label: # VPC Tier 1 Configuration
        default: NAT Configuration
      Parameters: # Label Parameters
      - pNatType
      - pNatInstanceKeyPair
      - pNatInstanceSourceCidrRange
      - pNatInstanceType
    - Label: # VPC Tier 1 Configuration
        default: VPC Tier 1 - Public Subnets
      Parameters: # Label Parameters
      - pTier1PublicSubnet1Cidr
      - pTier1PublicSubnet2Cidr
      - pTier1PublicSubnet3Cidr
      - pTier1PublicSubnet4Cidr
    - Label: # VPC Tier 2 Configuration
        default: VPC Tier 2 - Private Subnets
      Parameters: # Label Parameters
      - pTier2PrivateSubnet1Cidr
      - pTier2PrivateSubnet2Cidr
      - pTier2PrivateSubnet3Cidr
      - pTier2PrivateSubnet4Cidr
    - Label: # VPC Tier 3 Configuration
        default: VPC Tier 3 - Private Subnets - Optional with 2 Tier
      Parameters: # Label Parameters
      - pTier3PrivateSubnet1Cidr
      - pTier3PrivateSubnet2Cidr
      - pTier3PrivateSubnet3Cidr
      - pTier3PrivateSubnet4Cidr
    ParameterLabels: # Parameter Labels
      pEnvironmentName: # Evironment Name to associate with the VPC.
        default: Evironment Name to associate with the VPC.
      pEnvironmentVersion: # This allows for updates, think (Blue/Green)
        default: 'This allows for updates, think (Blue/Green)'
      pVpcCidr: # Amazon Virtual Private Cloud CIDR IP Range
        default: Amazon VPC CIDR IP Range
      pNumTiers: # Number of Tiers used in the VPC.
        default: Number of Tiers used in the VPC.
      pNumAzs: # Number of Availability Zones used in the VPC.
        default: Number of Availability Zones used in the VPC.
      pNatType:
        default: Choose NAT-GW, NAT-Instance, or No-Nat
      pNatInstanceKeyPair:
        default: Provide a SSH Key for the NAT Instance.
      pNatInstanceSourceCidrRange:
        default: Provide a Source Network and CIDR Range.
      pNatInstanceType:
        default: Provide an Instance-ID.
      pTier1PublicSubnet1Cidr: # Tier 1 Public Subnet 1 CIDR Address
        default: Tier 1 AZ 1 - IP Address with CIDR
      pTier1PublicSubnet2Cidr: # Tier 1 Public Subnet 2 CIDR Address
        default: Tier 1 AZ 2 - IP Address with CIDR
      pTier1PublicSubnet3Cidr: # Tier 1 Public Subnet 3 CIDR Address
        default: Tier 1 AZ 3 - IP Address with CIDR or leave Blank
      pTier1PublicSubnet4Cidr: # Tier 1 Public Subnet 4 CIDR Address
        default: Tier 1 AZ 4 - IP Address with CIDR or leave Blank
      pTier2PrivateSubnet1Cidr: # Tier 2 Private Subnet 1 CIDR Address
        default: Tier 2 AZ 1 - IP Address with CIDR
      pTier2PrivateSubnet2Cidr: # Tier 2 Private Subnet 2 CIDR Address
        default: Tier 2 AZ 2 - IP Address with CIDR
      pTier2PrivateSubnet3Cidr: # Tier 2 Private Subnet 3 CIDR Address
        default: Tier 2 AZ 3 - IP Address with CIDR or leave Blank
      pTier2PrivateSubnet4Cidr: # Tier 2 Private Subnet 4 CIDR Address
        default: Tier 2 AZ 4 - IP Address with CIDR or leave Blank
      pTier3PrivateSubnet1Cidr: # Tier 3 Private Subnet 1 CIDR Address
        default: Tier 3 AZ 1 - IP Address with CIDR or leave Blank
      pTier3PrivateSubnet2Cidr: # Tier 3 Private Subnet 2 CIDR Address
        default: Tier 3 AZ 2 - IP Address with CIDR or leave Blank
      pTier3PrivateSubnet3Cidr: # Tier 3 Private Subnet 3 CIDR Address
        default: Tier 3 AZ 3 - IP Address with CIDR or leave Blank
      pTier3PrivateSubnet4Cidr: # Tier 3 Private Subnet 4 CIDR Address
        default: Tier 3 AZ 4 - IP Address with CIDR or leave Blank
Parameters: # CloudFormation Parameters
  pEnvironmentName:
    Type: String
    Description: Choose "Dev, Test, UAT, Prod"
    AllowedValues:
    - Dev
    - Test
    - UAT
    - Prod
  pEnvironmentVersion:
    Type: String
    Description: Choose "Blue, Green"
    AllowedValues:
    - Blue
    - Green
  pVpcCidr: # Amazon VPC CIDR IP Range
    Type: String
    Description: Network CIDR Format x.x.x.x/x
    Default: 10.1.0.0/16
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    MinLength: 9
    MaxLength: 18
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  pNumTiers:  # Number of Tiers used in the VPC.
    Type: String
    Description: Choose 2 or 3
    AllowedValues:
    - 2
    - 3
  pNumAzs: # Number of Availability Zones used in the VPC.
    Type: String
    Description: Choose 2, 3, or 4
    AllowedValues:
    - 2
    - 3
    - 4
  pTier1PublicSubnet1Cidr: # Tier 1 Public Subnet 1 CIDR Address
    Type: String
    Description: Tier 1 Public Subnet AZ1 - Required
    Default: 10.1.1.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    MinLength: 9
    MaxLength: 18
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  pTier1PublicSubnet2Cidr: # Tier 1 Public Subnet 2 CIDR Address
    Type: String
    Description: Tier 1 Public Subnet AZ2 - Required
    Default: 10.1.2.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    MinLength: 9
    MaxLength: 18
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  pTier1PublicSubnet3Cidr: # Tier 1 Public Subnet 3 CIDR Address
    Type: String
    Description: Tier 1 Public Subnet AZ3 - Optional with 2 AZ
    Default: 10.1.3.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})|^$
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  pTier1PublicSubnet4Cidr: # Tier 1 Public Subnet 4 CIDR Address
    Type: String
    Description: Tier 1 Public Subnet AZ4 - Optional with 3 AZ or 2 AZ
    Default: 10.1.4.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})|^$
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  pTier2PrivateSubnet1Cidr: # Tier 2 Private Subnet 1 CIDR Address
    Type: String
    Description: Tier 2 Private Subnet AZ1  - Required
    Default: 10.1.11.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    MinLength: 9
    MaxLength: 18
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  pTier2PrivateSubnet2Cidr: # Tier 2 Private Subnet 2 CIDR Address
    Type: String
    Description: Tier 2 Private Subnet AZ 2 - Required
    Default: 10.1.12.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    MinLength: 9
    MaxLength: 18
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  pTier2PrivateSubnet3Cidr: # Tier 2 Private Subnet 3 CIDR Address
    Type: String
    Description: Tier 2 Private Subnet AZ 3 - Optional with 2 AZ
    Default: 10.1.13.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})|^$
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  pTier2PrivateSubnet4Cidr: # Tier 2 Private Subnet 4 CIDR Address
    Type: String
    Description: Tier 2 Tier 2 Private Subnet AZ 4 - Optional with 3 AZ or 2 AZ
    Default: 10.1.14.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})|^$
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  pTier3PrivateSubnet1Cidr: # Tier 3 Private Subnet 1 CIDR Address
    Type: String
    Description: Tier 3 Private Subnet AZ 1 - Optional with 2 Tier
    Default: 10.1.21.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})|^$
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  pTier3PrivateSubnet2Cidr: # Tier 3 Private Subnet 2 CIDR Address
    Type: String
    Description: Tier 3 Private Subnet AZ 2 - Optional with 2 Tier
    Default: 10.1.22.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})|^$
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  pTier3PrivateSubnet3Cidr: # Tier 3 Private Subnet 3 CIDR Address
    Type: String
    Description: Tier 3 Private Subnet AZ 3 - Optional with 2 Tier or 2 AZ
    Default: 10.1.23.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})|^$
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  pTier3PrivateSubnet4Cidr: # Tier 3 Private Subnet 4 CIDR Address
    Type: String
    Description: Tier 3 Private Subnet AZ 4 - Optional with 2 Tier or 2 AZ or 3 AZ
    Default: 10.1.24.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})|^$
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  pNatInstanceType:
    Type: String
    Description: NAT-Instance EC2 instance type - Not used with NAT-GW or No-NAT.
    Default: t2.small
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  pNatType:
    Type: String
    Description: Choose a NAT option - This is Required
    AllowedValues:
    - NAT-GW
    - NAT-Instance
    - NO-NAT
  pNatInstanceSourceCidrRange:
    Type: String
    Description: Used to SSH into the NAT Instance - Not used with NAT-GW or No-NAT.
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})|^$
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x or left Blank.
  pNatInstanceKeyPair:
    Type: String
    Description: Used to SSH into the NAT Instance - Not used with NAT-GW or No-NAT.
    AllowedPattern: ^[a-zA-Z0-9]*$|^$
    ConstraintDescription: Must be a Valid EC2 KeyPair Name or left Blank.
Conditions:
  # Allows Resource to be created for NAT Gateway.
  cCreateNatGatway: !Equals [ !Ref 'pNatType', NAT-GW ]
  # Allows Resource to be created for NAT Gateway and Allows Resource to be created if AZ equal to 3 or 4
  cCreateNatGatwayAnd3or4Azs: !And [ !Or [ !Equals [ !Ref pNumAzs, 3], !Equals [ !Ref pNumAzs, 4 ] ], !Equals [ !Ref 'pNatType', NAT-GW ] ]
  # Allows Resource to be created for NAT Gateway and Allows Resource to be created if AZ equal to 4
  cCreateNatGatwayAnd4Azs: !And [ !Equals [ !Ref 'pNumAzs', 4 ], !Equals [ !Ref 'pNatType', NAT-GW ] ]
  # Allows Resource to be created for NAT Gateway and Allows Resource to be Created if equal to 3
  cCreateNatGatwayAnd3Tiers: !And [ !Equals [ !Ref 'pNumTiers', 3 ], !Equals [ !Ref 'pNatType', NAT-GW ] ]
  # Allows Resource to be created for NAT Gateway and # Allwos Resource to be created if Teirs equal 3 and AZ equals 3 or AZ equals 4.
  cCreateNatGatwayAndTier3Az3orAz4: !And [ !And [ !Equals [ !Ref pNumTiers, 3], !Or [ !Equals [ !Ref pNumAzs, 3], !Equals [ !Ref pNumAzs, 4 ] ] ], !Equals [ !Ref 'pNatType', NAT-GW ] ]
  # Allows Resource to be created for NAT Gateway and Allows Resource to be created for NAT Gateway and Allows Resource to be created if AZ equal to 4
  cCreateNatGatwayAndTier3Az4: !And [ !And [ !Equals [ !Ref 'pNumTiers', 3 ], !Equals [ !Ref 'pNumAzs', 4 ] ], !Equals [ !Ref 'pNatType', NAT-GW ] ]
  # Allows Resource to be created for NAT Instnace.
  cCreateNatInstance: !Equals [ !Ref 'pNatType', NAT-Instance ]
  # Allows Resource to be created for NAT Gateway and Allows Resource to be created if AZ equal to 3 or 4
  cCreateNatInstanceAnd3or4Azs: !And [ !Or [ !Equals [ !Ref pNumAzs, 3], !Equals [ !Ref pNumAzs, 4 ] ], !Equals [ !Ref 'pNatType', NAT-Instance ] ]
  # Allows Resource to be created for NAT Gateway and Allows Resource to be created if AZ equal to 4
  cCreateNatInstanceAnd4Azs: !And [ !Equals [ !Ref 'pNumAzs', 4 ], !Equals [ !Ref 'pNatType', NAT-Instance ] ]
  # Allows Resource to be created for NAT Gateway and Allows Resource to be Created if equal to 3
  cCreateNatInstanceAnd3Tiers: !And [ !Equals [ !Ref 'pNumTiers', 3 ], !Equals [ !Ref 'pNatType', NAT-Instance ] ]
  # Allows Resource to be created for NAT Gateway and # Allwos Resource to be created if Teirs equal 3 and AZ equals 3 or AZ equals 4.
  cCreateNatInstanceAndTier3Az3orAz4: !And [ !And [ !Equals [ !Ref pNumTiers, 3], !Or [ !Equals [ !Ref pNumAzs, 3], !Equals [ !Ref pNumAzs, 4 ] ] ], !Equals [ !Ref 'pNatType', NAT-Instance ] ]
  # Allows Resource to be created for NAT Gateway and Allows Resource to be created for NAT Gateway and Allows Resource to be created if AZ equal to 4
  cCreateNatInstanceAndTier3Az4: !And [ !And [ !Equals [ !Ref 'pNumTiers', 3 ], !Equals [ !Ref 'pNumAzs', 4 ] ], !Equals [ !Ref 'pNatType', NAT-Instance ] ]
  # Allows Resource to be Created if equal to 3 Tiers
  cCreate3Tiers: !Equals [ !Ref 'pNumTiers', 3 ]
  # Allows Resouce to be created if AZs equal to 4
  cCreate4Azs: !Equals [ !Ref 'pNumAzs', 4 ]
  # Allows Resource to be created if AZ equal to 3 or 4
  cCreate3or4Azs: !Or [ !Equals [ !Ref pNumAzs, 3], !Equals [ !Ref pNumAzs, 4 ] ]
  # Allows Resource to be created if Tier equal to 3 and Azs equals 4
  cCreateTier3Az4: !And [ !Equals [ !Ref 'pNumTiers', 3 ], !Equals [ !Ref 'pNumAzs', 4 ] ]
  # Allwos Resource to be created if Teirs equal 3 and AZ equals 3 or AZ equals 4.
  cCreateTier3Az3orAz4: !And [ !Equals [ !Ref pNumTiers, 3], !Or [ !Equals [ !Ref pNumAzs, 3], !Equals [ !Ref pNumAzs, 4 ] ] ]
Resources: # CloudFormation Resources
#
# Tier 1
#
  rVpc: # Amazon VPC
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'pVpcCidr'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-VPC'
  rTier1InternetGateway: # Internet Gateway
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-IGW'
  rTier1InternetGatewayAttachment: # Attaching the Internet Gateway
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref 'rTier1InternetGateway'
      VpcId: !Ref 'rVpc'
  rTier1EIPPublicSubnet1: # Tier 1 Elastic IP 1 For NAT Gateway 1
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  rTier1EIPPublicSubnet2: # Tier1 Elastic IP 2 For NAT Gateway 2
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  rTier1EIPPublicSubnet3: # Tier1 Elastic IP 3 For NAT Gateway 3
    Type: AWS::EC2::EIP
    Condition: cCreate3or4Azs
    Properties:
      Domain: vpc
  rTier1EIPPublicSubnet4: # Tier1 Elastic IP 4 For NAT Gateway 4
    Type: AWS::EC2::EIP
    Condition: cCreate4Azs
    Properties:
      Domain: vpc
  rNatInstanceImageIdFunctionRole: # Minimal permissions allows logging and ec2:DescribeImages
    Type: AWS::IAM::Role
    Condition: cCreateNatInstance
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
          - Effect: Allow
            Action:
            - ec2:DescribeImages
            Resource: "*"
  rNatInstanceImageId: # Custom resource for finding NAT Instance Image IDs, Reference using !GetAtt rNatInstanceImageId.Ami
    Type: Custom::NatInstanceImageId
    Condition: cCreateNatInstance
    Properties:
      ServiceToken: !GetAtt rNatInstanceImageIdFunction.Arn
      Region: !Ref 'AWS::Region'
  rNatInstanceImageIdFunction: # Function code to find Image IDs
    Type: AWS::Lambda::Function
    Condition: cCreateNatInstance
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse

          def lambda_handler(event, context):
              ec2 = boto3.client('ec2', region_name=event['ResourceProperties']['Region'])
              try:
                  resp = ec2.describe_images(
                      Filters=[
                          {
                              'Name': 'name',
                              'Values': [ 'amzn-ami-vpc-nat-hvm-2017.09.1*' ]
                          },
                          {
                              'Name': 'owner-alias',
                              'Values': [ 'amazon' ]
                          }
                      ]
                  )
              except:
                  cfnresponse.send(event, context, 'FAILED')

              response_data = {}
              response_data['Ami'] = resp['Images'][0]['ImageId']
              cfnresponse.send(event, context, 'SUCCESS', response_data)
      Handler: index.lambda_handler
      Runtime: python3.6
      Timeout: 30
      Role: !GetAtt rNatInstanceImageIdFunctionRole.Arn
  rNatInstanceSecurityGroupSSHIngress: # Allow SSH to NAT instance
    Type: AWS::EC2::SecurityGroup
    Condition: cCreateNatInstance
    Properties:
      GroupDescription: Allow SSH to NAT Instance
      VpcId: !Ref 'rVpc'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref 'pNatInstanceSourceCidrRange'
  rNatInstanceSecurityGroupVPCIngress: # Allow 80/443 to NAT instance
    Type: AWS::EC2::SecurityGroup
    Condition: cCreateNatInstance
    Properties:
      GroupDescription: Allow TCP 80 & 443 to NAT Instance
      VpcId: !Ref 'rVpc'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: !Ref 'pVpcCidr'
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: !Ref 'pVpcCidr'
  rTier1NatInstanceEniPublicSubnet1:
      Type: AWS::EC2::NetworkInterface
      Condition: cCreateNatInstance
      Properties:
          SubnetId: !Ref 'rTier1PublicSubnet1'
          GroupSet:
            - !Ref rNatInstanceSecurityGroupSSHIngress
            - !Ref rNatInstanceSecurityGroupVPCIngress
          Description: Interface for ProductionNat device
          Tags:
            - Key: Name
              Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-NAT-Instance-ENI-Public-Subnet-1'
  rTier1AssociateEipNatInstancePublicSubnet1:
    Type: AWS::EC2::EIPAssociation
    Condition: cCreateNatInstance
    DependsOn:
      - rTier1NatInstancePublicSubnet1
    Properties:
      AllocationId: !GetAtt rTier1EIPPublicSubnet1.AllocationId
      NetworkInterfaceId: !Ref rTier1NatInstanceEniPublicSubnet1
  rTier1NatInstancePublicSubnet1:
    Type: AWS::EC2::Instance
    DependsOn: rNatInstanceImageId
    Condition: cCreateNatInstance
    Properties:
      InstanceType: !Ref pNatInstanceType
      SourceDestCheck: false
      KeyName: !Ref pNatInstanceKeyPair
      ImageId: !GetAtt rNatInstanceImageId.Ami
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref rTier1NatInstanceEniPublicSubnet1
          DeviceIndex: 0
      Tags:
        - Key: Name
          Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-NAT-Instance-Public-Subnet-1'
      UserData: !Base64
          'Fn::Sub': |
              #!/bin/sh
              echo 1 > /proc/sys/net/ipv4/ip_forward
              echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects
              /sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE
              /sbin/iptables-save > /etc/sysconfig/iptables
              mkdir -p /etc/sysctl.d/
              cat <<EOF > /etc/sysctl.d/nat.conf
              net.ipv4.ip_forward = 1
              net.ipv4.conf.eth0.send_redirects = 0
              EOF
  rTier1NatInstanceEniPublicSubnet2:
      Type: AWS::EC2::NetworkInterface
      Condition: cCreateNatInstance
      Properties:
          SubnetId: !Ref 'rTier1PublicSubnet2'
          GroupSet:
            - !Ref rNatInstanceSecurityGroupSSHIngress
            - !Ref rNatInstanceSecurityGroupVPCIngress
          Description: Interface for ProductionNat device
          Tags:
            - Key: Name
              Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-NAT-Instance-ENI-Public-Subnet-2'
  rTier1AssociateEipNatInstancePublicSubnet2:
    Type: AWS::EC2::EIPAssociation
    Condition: cCreateNatInstance
    DependsOn:
      - rTier1NatInstancePublicSubnet2
    Properties:
      AllocationId: !GetAtt rTier1EIPPublicSubnet2.AllocationId
      NetworkInterfaceId: !Ref rTier1NatInstanceEniPublicSubnet2
  rTier1NatInstancePublicSubnet2:
    Type: AWS::EC2::Instance
    DependsOn: rNatInstanceImageId
    Condition: cCreateNatInstance
    Properties:
      InstanceType: !Ref pNatInstanceType
      SourceDestCheck: false
      KeyName: !Ref pNatInstanceKeyPair
      ImageId: !GetAtt rNatInstanceImageId.Ami
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref rTier1NatInstanceEniPublicSubnet2
          DeviceIndex: 0
      Tags:
        - Key: Name
          Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-NAT-Instance-Public-Subnet-2'
      UserData: !Base64
          'Fn::Sub': |
              #!/bin/sh
              echo 1 > /proc/sys/net/ipv4/ip_forward
              echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects
              /sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE
              /sbin/iptables-save > /etc/sysconfig/iptables
              mkdir -p /etc/sysctl.d/
              cat <<EOF > /etc/sysctl.d/nat.conf
              net.ipv4.ip_forward = 1
              net.ipv4.conf.eth0.send_redirects = 0
              EOF
  rTier1NatInstanceEniPublicSubnet3:
      Type: AWS::EC2::NetworkInterface
      Condition: cCreateNatInstanceAnd3or4Azs
      Properties:
          SubnetId: !Ref 'rTier1PublicSubnet3'
          GroupSet:
            - !Ref rNatInstanceSecurityGroupSSHIngress
            - !Ref rNatInstanceSecurityGroupVPCIngress
          Description: Interface for ProductionNat device
          Tags:
            - Key: Name
              Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-NAT-Instance-ENI-Public-Subnet-3'
  rTier1AssociateEipNatInstancePublicSubnet3:
    Type: AWS::EC2::EIPAssociation
    Condition: cCreateNatInstanceAnd3or4Azs
    DependsOn:
      - rTier1NatInstancePublicSubnet3
    Properties:
      AllocationId: !GetAtt rTier1EIPPublicSubnet3.AllocationId
      NetworkInterfaceId: !Ref rTier1NatInstanceEniPublicSubnet3
  rTier1NatInstancePublicSubnet3:
    Type: AWS::EC2::Instance
    DependsOn: rNatInstanceImageId
    Condition: cCreateNatInstanceAnd3or4Azs
    Properties:
      InstanceType: !Ref pNatInstanceType
      SourceDestCheck: false
      KeyName: !Ref pNatInstanceKeyPair
      ImageId: !GetAtt rNatInstanceImageId.Ami
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref rTier1NatInstanceEniPublicSubnet3
          DeviceIndex: 0
      Tags:
        - Key: Name
          Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-NAT-Instance-Public-Subnet-3'
      UserData: !Base64
          'Fn::Sub': |
              #!/bin/sh
              echo 1 > /proc/sys/net/ipv4/ip_forward
              echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects
              /sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE
              /sbin/iptables-save > /etc/sysconfig/iptables
              mkdir -p /etc/sysctl.d/
              cat <<EOF > /etc/sysctl.d/nat.conf
              net.ipv4.ip_forward = 1
              net.ipv4.conf.eth0.send_redirects = 0
              EOF
  rTier1NatInstanceEniPublicSubnet4:
      Type: AWS::EC2::NetworkInterface
      Condition: cCreateNatInstanceAnd4Azs
      Properties:
          SubnetId: !Ref 'rTier1PublicSubnet4'
          GroupSet:
            - !Ref rNatInstanceSecurityGroupSSHIngress
            - !Ref rNatInstanceSecurityGroupVPCIngress
          Description: Interface for ProductionNat device
          Tags:
            - Key: Name
              Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-NAT-Instance-ENI-Public-Subnet-4'
  rTier1AssociateEipNatInstancePublicSubnet4:
    Type: AWS::EC2::EIPAssociation
    Condition: cCreateNatInstanceAnd4Azs
    DependsOn:
      - rTier1NatInstancePublicSubnet4
    Properties:
      AllocationId: !GetAtt rTier1EIPPublicSubnet4.AllocationId
      NetworkInterfaceId: !Ref rTier1NatInstanceEniPublicSubnet4
  rTier1NatInstancePublicSubnet4:
    Type: AWS::EC2::Instance
    DependsOn: rNatInstanceImageId
    Condition: cCreateNatInstanceAnd4Azs
    Properties:
      InstanceType: !Ref pNatInstanceType
      SourceDestCheck: false
      KeyName: !Ref pNatInstanceKeyPair
      ImageId: !GetAtt rNatInstanceImageId.Ami
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref rTier1NatInstanceEniPublicSubnet4
          DeviceIndex: 0
      Tags:
        - Key: Name
          Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-NAT-Instance-Public-Subnet-4'
      UserData: !Base64
          'Fn::Sub': |
              #!/bin/sh
              echo 1 > /proc/sys/net/ipv4/ip_forward
              echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects
              /sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE
              /sbin/iptables-save > /etc/sysconfig/iptables
              mkdir -p /etc/sysctl.d/
              cat <<EOF > /etc/sysctl.d/nat.conf
              net.ipv4.ip_forward = 1
              net.ipv4.conf.eth0.send_redirects = 0
              EOF

  rTier1NatGatewayPublicSubnet1: # Tier 1 Nat Gateway 1
    Type: AWS::EC2::NatGateway
    DependsOn: rTier1InternetGatewayAttachment
    Condition: cCreateNatGatway
    Properties:
      AllocationId: !GetAtt rTier1EIPPublicSubnet1.AllocationId
      SubnetId: !Ref 'rTier1PublicSubnet1'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-NATGW-Public-Subnet-1'
  rTier1NatGatewayPublicSubnet2: # Tier 1 Nat Gateway 2
    Type: AWS::EC2::NatGateway
    DependsOn: rTier1InternetGatewayAttachment
    Condition: cCreateNatGatway
    Properties:
      AllocationId: !GetAtt rTier1EIPPublicSubnet2.AllocationId
      SubnetId: !Ref 'rTier1PublicSubnet2'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-NATGW-Public-Subnet-2'
  rTier1NatGatewayPublicSubnet3: # Tier 1 Nat Gateway 3
    Type: AWS::EC2::NatGateway
    DependsOn: rTier1InternetGatewayAttachment
    Condition: cCreateNatGatwayAnd3or4Azs
    Properties:
      AllocationId: !GetAtt rTier1EIPPublicSubnet3.AllocationId
      SubnetId: !Ref 'rTier1PublicSubnet3'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-NATGW-Public-Subnet-3'
  rTier1NatGatewayPublicSubnet4: # Tier 1 Nat Gateway 4
    Type: AWS::EC2::NatGateway
    Condition: cCreateNatGatwayAnd4Azs
    DependsOn: rTier1InternetGatewayAttachment
    Properties:
      AllocationId: !GetAtt rTier1EIPPublicSubnet4.AllocationId
      SubnetId: !Ref 'rTier1PublicSubnet4'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-NATGW-Public-Subnet-4'


  rTier1PublicSubnet1: # Tier 1 Public Subnet 1
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
                    - 0
                    - !GetAZs ''
      CidrBlock: !Ref 'pTier1PublicSubnet1Cidr'
      VpcId: !Ref 'rVpc'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-Public-Subnet-1'
  rTier1PublicSubnet2: # Tier 1 Public Subnet 2
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
                    - 1
                    - !GetAZs ''
      CidrBlock: !Ref 'pTier1PublicSubnet2Cidr'
      VpcId: !Ref 'rVpc'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-Public-Subnet-2'
  rTier1PublicSubnet3: # Tier 1 Public Subnet 3
    Type: AWS::EC2::Subnet
    Condition: cCreate3or4Azs
    Properties:
      AvailabilityZone: !Select
                    - 2
                    - !GetAZs ''
      CidrBlock: !Ref 'pTier1PublicSubnet3Cidr'
      VpcId: !Ref 'rVpc'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-Public-Subnet-3'
  rTier1PublicSubnet4: # Tier 1 Public Subnet 4
    Type: AWS::EC2::Subnet
    Condition: cCreate4Azs
    Properties:
      AvailabilityZone: !Select
                    - 3
                    - !GetAZs ''
      CidrBlock: !Ref 'pTier1PublicSubnet4Cidr'
      VpcId: !Ref 'rVpc'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-Public-Subnet-4'
  rTier1PublicRouteTable1: # Tier 1 Public Route Table 1
    Type: AWS::EC2::RouteTable
    DependsOn: rTier1InternetGatewayAttachment
    Properties:
      VpcId: !Ref 'rVpc'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-Tier-1-Public-Route-Table-1'
  rTier1PublicRouteTable2: # Tier 1 Public Route Table 2
    Type: AWS::EC2::RouteTable
    DependsOn: rTier1InternetGatewayAttachment
    Properties:
      VpcId: !Ref 'rVpc'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-Tier-1-Public-Route-Table-2'
  rTier1PublicRouteTable3: # Tier 1 Public Route Table 3
    Type: AWS::EC2::RouteTable
    Condition: cCreate3or4Azs
    DependsOn: rTier1InternetGatewayAttachment
    Properties:
      VpcId: !Ref 'rVpc'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-Tier-1-Public-Route-Table-3'
  rTier1PublicRouteTable4: # Tier 1 Public Route Table 4
    Type: AWS::EC2::RouteTable
    Condition: cCreate4Azs
    DependsOn: rTier1InternetGatewayAttachment
    Properties:
      VpcId: !Ref 'rVpc'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-Tier-1-Public-Route-Table-4'
  rTier1PublicIgwRoute1: # Tier 1 Public Internet Gateway Route 1
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'rTier1InternetGateway'
      RouteTableId: !Ref 'rTier1PublicRouteTable1'
  rTier1PublicIgwRoute2: # Tier 1 Public Internet Gateway Route 2
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'rTier1InternetGateway'
      RouteTableId: !Ref 'rTier1PublicRouteTable2'
  rTier1PublicIgwRoute3: # Tier 1 Public Internet Gateway Route 3
    Type: AWS::EC2::Route
    Condition: cCreate3or4Azs
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'rTier1InternetGateway'
      RouteTableId: !Ref 'rTier1PublicRouteTable3'
  rTier1PublicIgwRoute4: # Tier 1 Public Internet Gateway Route 4
    Type: AWS::EC2::Route
    Condition: cCreate4Azs
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'rTier1InternetGateway'
      RouteTableId: !Ref 'rTier1PublicRouteTable4'
  rTier1PublicSubnet1RouteTableAssociation: # Associating IGW route to Public Route Table 1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'rTier1PublicRouteTable1'
      SubnetId: !Ref 'rTier1PublicSubnet1'
  rTier1PublicSubnet2RouteTableAssociation: # Associating IGW route to Public Route Table 2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'rTier1PublicRouteTable2'
      SubnetId: !Ref 'rTier1PublicSubnet2'
  rTier1PublicSubnet3RouteTableAssociation: # Associating IGW route to Public Route Table 3
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: cCreate3or4Azs
    Properties:
      RouteTableId: !Ref 'rTier1PublicRouteTable3'
      SubnetId: !Ref 'rTier1PublicSubnet3'
  rTier1PublicSubnet4RouteTableAssociation: # Associating IGW route to Public Route Table 4
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: cCreate4Azs
    Properties:
      RouteTableId: !Ref 'rTier1PublicRouteTable4'
      SubnetId: !Ref 'rTier1PublicSubnet4'
#
# Tier 2
#
  rTier2PrivateSubnet1: # Tier 2 Private Subnet 1
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
                    - 0
                    - !GetAZs ''
      CidrBlock: !Ref 'pTier2PrivateSubnet1Cidr'
      VpcId: !Ref 'rVpc'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-Tier-2-Private-Subnet-1'
  rTier2PrivateSubnet2: # Tier 2 Private Subnet 2
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
                    - 1
                    - !GetAZs ''
      CidrBlock: !Ref 'pTier2PrivateSubnet2Cidr'
      VpcId: !Ref 'rVpc'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-Tier-2-Private-Subnet-2'
  rTier2PrivateSubnet3: # Tier 2 Private Subnet 3
    Type: AWS::EC2::Subnet
    Condition: cCreate3or4Azs
    Properties:
      AvailabilityZone: !Select
                    - 2
                    - !GetAZs ''
      CidrBlock: !Ref 'pTier2PrivateSubnet3Cidr'
      VpcId: !Ref 'rVpc'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-Tier-2-Private-Subnet-3'
  rTier2PrivateSubnet4: # Tier 2 Private Subnet 4
    Type: AWS::EC2::Subnet
    Condition: cCreate4Azs
    Properties:
      AvailabilityZone: !Select
                    - 3
                    - !GetAZs ''
      CidrBlock: !Ref 'pTier2PrivateSubnet4Cidr'
      VpcId: !Ref 'rVpc'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-Tier-2-Private-Subnet-4'
  rTier2PrivateRouteTable1: # Tier 2 Private Route Table 1
    Type: AWS::EC2::RouteTable
    DependsOn: rTier1InternetGatewayAttachment
    Properties:
      VpcId: !Ref 'rVpc'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-Tier-2-Private-Route-Table-1'
  rTier2PrivateRouteTable2: # Tier 2 Private Route Table 2
    Type: AWS::EC2::RouteTable
    DependsOn: rTier1InternetGatewayAttachment
    Properties:
      VpcId: !Ref 'rVpc'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-Tier-2-Private-Route-Table-2'
  rTier2PrivateRouteTable3: # Tier 2 Private Route Table 3
    Type: AWS::EC2::RouteTable
    Condition: cCreate3or4Azs
    DependsOn: rTier1InternetGatewayAttachment
    Properties:
      VpcId: !Ref 'rVpc'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-Tier-2-Private-Route-Table-3'
  rTier2PrivateRouteTable4: # Tier 2 Private Route Table 4
    Type: AWS::EC2::RouteTable
    Condition: cCreate4Azs
    DependsOn: rTier1InternetGatewayAttachment
    Properties:
      VpcId: !Ref 'rVpc'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-Tier-2-Private-Route-Table-4'

  rTier2PrivateNatInstanceRoute1: # Tier 2 Private Nat Instance Route 1
    Type: AWS::EC2::Route
    Condition: cCreateNatInstance
    Properties:
      RouteTableId: !Ref 'rTier2PrivateRouteTable1'
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref 'rTier1NatInstancePublicSubnet1'
  rTier2PrivateNatInstanceRoute2: # Tier 2 Private Nat Instance Route 2
    Type: AWS::EC2::Route
    Condition: cCreateNatInstance
    Properties:
      RouteTableId: !Ref 'rTier2PrivateRouteTable2'
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref 'rTier1NatInstancePublicSubnet2'
  rTier2PrivateNatInstanceRoute3: # Tier 2 Private Nat Instance Route 3
    Type: AWS::EC2::Route
    Condition: cCreateNatInstanceAnd3or4Azs
    Properties:
      RouteTableId: !Ref 'rTier2PrivateRouteTable3'
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref 'rTier1NatInstancePublicSubnet3'
  rTier2PrivateNatInstanceRoute4: # Tier 2 Private Nat Instance Route 4
    Type: AWS::EC2::Route
    Condition: cCreateNatInstanceAnd4Azs
    Properties:
      RouteTableId: !Ref 'rTier2PrivateRouteTable4'
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref 'rTier1NatInstancePublicSubnet4'

  rTier2PrivateNatGWRoute1: # Tier 2 Private Nat Gateway Route 1
    Type: AWS::EC2::Route
    Condition: cCreateNatGatway
    Properties:
      RouteTableId: !Ref 'rTier2PrivateRouteTable1'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'rTier1NatGatewayPublicSubnet1'
  rTier2PrivateNatGWRoute2: # Tier 2 Private Nat Gateway Route 2
    Type: AWS::EC2::Route
    Condition: cCreateNatGatway
    Properties:
      RouteTableId: !Ref 'rTier2PrivateRouteTable2'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'rTier1NatGatewayPublicSubnet2'
  rTier2PrivateNatGWRoute3: # Tier 2 Private Nat Gateway Route 3
    Type: AWS::EC2::Route
    Condition: cCreateNatGatwayAnd3or4Azs
    Properties:
      RouteTableId: !Ref 'rTier2PrivateRouteTable3'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'rTier1NatGatewayPublicSubnet3'
  rTier2PrivateNatGWRoute4: # Tier 2 Private Nat Gateway Route 4
    Type: AWS::EC2::Route
    Condition: cCreateNatGatwayAnd4Azs
    Properties:
      RouteTableId: !Ref 'rTier2PrivateRouteTable4'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'rTier1NatGatewayPublicSubnet4'
  rTier2PrivateSubnetRouteTableAssociation1: # Tier 2 Associating Nat Gateway Route 1 to Private Route Table 1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'rTier2PrivateRouteTable1'
      SubnetId: !Ref 'rTier2PrivateSubnet1'
  rTier2PrivateSubnetRouteTableAssociation2: # Tier 2 Associating Nat Gateway Route 2 to Private Route Table 2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'rTier2PrivateRouteTable2'
      SubnetId: !Ref 'rTier2PrivateSubnet2'
  rTier2PrivateSubnetRouteTableAssociation3: # Tier 2 Associating Nat Gateway Route 3 to Private Route Table 3
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: cCreate3or4Azs
    Properties:
      RouteTableId: !Ref 'rTier2PrivateRouteTable3'
      SubnetId: !Ref 'rTier2PrivateSubnet3'
  rTier2PrivateSubnetRouteTableAssociation4: # Tier 2 Associating Nat Gateway Route 4 to Private Route Table 4
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: cCreate4Azs
    Properties:
      RouteTableId: !Ref 'rTier2PrivateRouteTable4'
      SubnetId: !Ref 'rTier2PrivateSubnet4'
#
# Tier 3
#
  rTier3PrivateSubnet1: # Tier 3 Private Subnet 1
    Type: AWS::EC2::Subnet
    Condition: cCreate3Tiers
    Properties:
      AvailabilityZone: !Select
                    - 0
                    - !GetAZs ''
      CidrBlock: !Ref 'pTier3PrivateSubnet1Cidr'
      VpcId: !Ref 'rVpc'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-Tier-3-Private-Subnet-1'
  rTier3PrivateSubnet2: # Tier 3 Private Subnet 2
    Type: AWS::EC2::Subnet
    Condition: cCreate3Tiers
    Properties:
      AvailabilityZone: !Select
                    - 1
                    - !GetAZs ''
      CidrBlock: !Ref 'pTier3PrivateSubnet2Cidr'
      VpcId: !Ref 'rVpc'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-Tier-3-Private-Subnet-2'
  rTier3PrivateSubnet3: # Tier 3 Private Subnet 3
    Type: AWS::EC2::Subnet
    Condition: cCreateTier3Az3orAz4
    Properties:
      AvailabilityZone: !Select
                    - 2
                    - !GetAZs ''
      CidrBlock: !Ref 'pTier3PrivateSubnet3Cidr'
      VpcId: !Ref 'rVpc'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-Tier-3-Private-Subnet-3'
  rTier3PrivateSubnet4: # Tier 3 Private Subnet 4
    Type: AWS::EC2::Subnet
    Condition: cCreateTier3Az4
    Properties:
      AvailabilityZone: !Select
                    - 3
                    - !GetAZs ''
      CidrBlock: !Ref 'pTier3PrivateSubnet4Cidr'
      VpcId: !Ref 'rVpc'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-Tier-3-Private-Subnet-4'
  rTier3PrivateRouteTable1: # Tier 3 Private Route Table 1
    Type: AWS::EC2::RouteTable
    Condition: cCreate3Tiers
    DependsOn: rTier1InternetGatewayAttachment
    Properties:
      VpcId: !Ref 'rVpc'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-Tier-3-Private-Route-Table-1'
  rTier3PrivateRouteTable2: # Tier 3 Private Route Table 2
    Type: AWS::EC2::RouteTable
    Condition: cCreate3Tiers
    DependsOn: rTier1InternetGatewayAttachment
    Properties:
      VpcId: !Ref 'rVpc'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-Tier-3-Private-Route-Table-1'
  rTier3PrivateRouteTable3: # Tier 3 Private Route Table 3
    Type: AWS::EC2::RouteTable
    Condition: cCreateTier3Az3orAz4
    DependsOn: rTier1InternetGatewayAttachment
    Properties:
      VpcId: !Ref 'rVpc'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-Tier-3-Private-Route-Table-3'
  rTier3PrivateRouteTable4: # Tier 3 Private Route Table 4
    Type: AWS::EC2::RouteTable
    Condition: cCreateTier3Az4
    DependsOn: rTier1InternetGatewayAttachment
    Properties:
      VpcId: !Ref 'rVpc'
      Tags:
      - Key: Name
        Value: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-Tier-3-Private-Route-Table-4'
  rTier3PrivateNatGWRoute1: # Tier 3 Private Nat Gateway Route 1
    Type: AWS::EC2::Route
    Condition: cCreateNatGatwayAnd3Tiers
    Properties:
      RouteTableId: !Ref 'rTier3PrivateRouteTable1'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'rTier1NatGatewayPublicSubnet1'
  rTier3PrivateNatGWRoute2: # Tier 3 Private Nat Gateway Route 2
    Type: AWS::EC2::Route
    Condition: cCreateNatGatwayAnd3Tiers
    Properties:
      RouteTableId: !Ref 'rTier3PrivateRouteTable2'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'rTier1NatGatewayPublicSubnet2'
  rTier3PrivateNatGWRoute3: # Tier 3 Private Nat Gateway Route 3
    Type: AWS::EC2::Route
    Condition: cCreateNatGatwayAndTier3Az3orAz4
    Properties:
      RouteTableId: !Ref 'rTier3PrivateRouteTable3'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'rTier1NatGatewayPublicSubnet3'
  rTier3PrivateNatGWRoute4: # Tier 3 Private Nat Gateway Route 4
    Type: AWS::EC2::Route
    Condition: cCreateNatGatwayAndTier3Az4
    Properties:
      RouteTableId: !Ref 'rTier3PrivateRouteTable4'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'rTier1NatGatewayPublicSubnet4'
  rTier3PrivateNatInstanceRoute1: # Tier 3 Private Nat Instance Route 1
    Type: AWS::EC2::Route
    Condition: cCreateNatInstanceAnd3Tiers
    Properties:
      RouteTableId: !Ref 'rTier3PrivateRouteTable1'
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref 'rTier1NatInstancePublicSubnet1'
  rTier3PrivateNatInstanceRoute2: # Tier 3 Private Nat Instance Route 2
    Type: AWS::EC2::Route
    Condition: cCreateNatInstanceAnd3Tiers
    Properties:
      RouteTableId: !Ref 'rTier3PrivateRouteTable2'
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref 'rTier1NatInstancePublicSubnet2'
  rTier3PrivateNatInstanceRoute3: # Tier 3 Private Nat Instance Route 3
    Type: AWS::EC2::Route
    Condition: cCreateNatInstanceAndTier3Az3orAz4
    Properties:
      RouteTableId: !Ref 'rTier3PrivateRouteTable3'
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref 'rTier1NatInstancePublicSubnet3'
  rTier3PrivateNatInstanceRoute4: # Tier 3 Private Nat Instance Route 4
    Type: AWS::EC2::Route
    Condition: cCreateNatInstanceAndTier3Az4
    Properties:
      RouteTableId: !Ref 'rTier3PrivateRouteTable4'
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref 'rTier1NatInstancePublicSubnet4'
  rTier3PrivateSubnetRouteTableAssociation1: # Tier 3 Associating Nat Gateway Route 1 to Private Route Table 1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: cCreate3Tiers
    Properties:
      RouteTableId: !Ref 'rTier3PrivateRouteTable1'
      SubnetId: !Ref 'rTier3PrivateSubnet1'
  rTier3PrivateSubnetRouteTableAssociation2: # Tier 3 Associating Nat Gateway Route 2 to Private Route Table 2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: cCreate3Tiers
    Properties:
      RouteTableId: !Ref 'rTier3PrivateRouteTable2'
      SubnetId: !Ref 'rTier3PrivateSubnet2'
  rTier3PrivateSubnetRouteTableAssociation3: # Tier 3 Associating Nat Gateway Route 3 to Private Route Table 3
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: cCreateTier3Az3orAz4
    Properties:
      RouteTableId: !Ref 'rTier3PrivateRouteTable3'
      SubnetId: !Ref 'rTier3PrivateSubnet3'
  rTier3PrivateSubnetRouteTableAssociation4: # Tier 3 Associating Nat Gateway Route 4 to Private Route Table 4
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: cCreateTier3Az4
    Properties:
      RouteTableId: !Ref 'rTier3PrivateRouteTable4'
      SubnetId: !Ref 'rTier3PrivateSubnet4'
Outputs: # CloudFormation Outputs Section
  oVpcId: # Output for Amazon VPC ID.
    Description: VpcId
    Value: !Ref 'rVpc'
    Export:
      Name: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-oVpcId'
  oTier1PublicSubnet1: # Output for Tier 1 Public Subnet 1 ID
    Description: Tier 1 Public Subnet 1
    Value: !Ref 'rTier1PublicSubnet1'
    Export:
      Name: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-oTier1PublicSubnet1'
  oTier1PublicSubnet2: # Output for Tier 1 Public Subnet 2 ID
    Description: Tier 1 Public Subnet 2
    Value: !Ref 'rTier1PublicSubnet2'
    Export:
      Name: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-oTier1PublicSubnet2'
  oTier1PublicSubnet3: # Output for Tier 1 Public Subnet 3 ID
    Description: Tier 1 Public Subnet 3
    Value: !Ref 'rTier1PublicSubnet3'
    Condition: cCreate3or4Azs
    Export:
      Name: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-oTier1PublicSubnet3'
  oTier1PublicSubnet4: # Output for Tier 1 Public Subnet 4 ID
    Description: Tier 1 Public Subnet 4
    Value: !Ref 'rTier1PublicSubnet4'
    Condition: cCreate4Azs
    Export:
      Name: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-oTier1PublicSubnet4'
  oTier2PrivateSubnet1: # Output for Tier 2 Private Subnet 1 ID
    Description: Tier 2 Private Subnet 1
    Value: !Ref 'rTier2PrivateSubnet1'
    Export:
      Name: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-oTier2PrivateSubnet1'
  oTier2PrivateSubnet2: # Output for Tier 2 Private Subnet 2 ID
    Description: Tier 2 Private Subnet 2
    Value: !Ref 'rTier2PrivateSubnet2'
    Export:
      Name: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-oTier2PrivateSubnet2'
  oTier2PrivateSubnet3: # Output for Tier 2 Private Subnet 3 ID
    Description: Tier 2 Private Subnet 3
    Value: !Ref 'rTier2PrivateSubnet3'
    Condition: cCreate3or4Azs
    Export:
      Name: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-oTier2PrivateSubnet3'
  oTier2PrivateSubnet4: # Output for Tier 2 Private Subnet 4 ID
    Description: Tier 2 Private Subnet 4
    Value: !Ref 'rTier2PrivateSubnet4'
    Condition: cCreate4Azs
    Export:
      Name: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-oTier2PrivateSubnet4'
  oTier3PrivateSubnet1: # Output for Tier 3 Private Subnet 1 ID
    Description: Tier 3 Private Subnet 1
    Value: !Ref 'rTier3PrivateSubnet1'
    Condition: cCreate3Tiers
    Export:
      Name: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-oTier3PrivateSubnet1'
  oTier3PrivateSubnet2: # Output for Tier 3 Private Subnet 2 ID
    Description: Tier 3 Private Subnet 2
    Value: !Ref 'rTier3PrivateSubnet2'
    Condition: cCreate3Tiers
    Export:
      Name: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-oTier3PrivateSubnet2'
  oTier3PrivateSubnet3: # Output for Tier 3 Private Subnet 3 ID
    Description: Tier 3 Private Subnet 3
    Value: !Ref 'rTier3PrivateSubnet3'
    Condition: cCreateTier3Az3orAz4
    Export:
      Name: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-oTier3PrivateSubnet3'
  oTier3PrivateSubnet4: # Output for Tier 3 Private Subnet 4 ID
    Description: Tier 3 Private Subnet 4
    Value: !Ref 'rTier3PrivateSubnet4'
    Condition: cCreateTier3Az4
    Export:
      Name: !Sub '${pEnvironmentName}-${pEnvironmentVersion}-oTier3PrivateSubnet4'
  oAmiId:
    Description: NAT AMI ID from Lambda Function.
    Value: !GetAtt rNatInstanceImageId.Ami
    Condition: cCreateNatInstance
