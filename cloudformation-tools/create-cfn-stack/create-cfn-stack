#!/usr/bin/env python

from __future__ import print_function
import boto3
import botocore
import json
import time
import sys
import argparse

'''AWS Create CloudFormation Stack

This script creates a CloudFormation stack either in the current AWS account or a supplied account name

'''

__version__ = '0.1'
__author__ = '@author@'
__email__ = '@email@'


def get_account_id(account_name, region):

    '''
        Get account ID based on the name
    '''

    client = boto3.client('organizations')

    # See if account exists
    token = None
    paginator = client.get_paginator('list_accounts')
    page_iterator = paginator.paginate(
        PaginationConfig={
            'StartingToken': token
        }
    )
   
    account_id = None 
    for page in page_iterator:
        for account in page['Accounts']:
            print(account['Name'])
            if account['Name'] == account_name:
                print("Account found: " + account_name + " " + account["Id"])
                account_id = account["Id"]
                break
    
    if account_id is None:
        print("Account name not found: ", account_name)
        sys.exit(1)

    return account_id


def assume_role(account_id, account_role):

    '''
        Assume admin role within the newly created account and return credentials
    '''

    sts_client = boto3.client('sts')
    role_arn = 'arn:aws:iam::' + account_id + ':role/' + account_role

    # Call the assume_role method of the STSConnection object and pass the role
    # ARN and a role session name.

    assuming_role = True
    while assuming_role is True:
        try:
            assuming_role = False
            assumedRoleObject = sts_client.assume_role(
                RoleArn=role_arn,
                RoleSessionName="NewAccountRole"
            )
        except botocore.exceptions.ClientError as e:
            assuming_role = True
            print(e)
            print("Retrying...")
            time.sleep(10)

    # From the response that contains the assumed role, get the temporary
    # credentials that can be used to make subsequent API calls
    return assumedRoleObject['Credentials']


def get_template(template_file):

    '''
        Read a template file and return the contents
    '''

    print("Reading resources from " + template_file)
    f = open(template_file, "r")
    cf_template = f.read()
    
    return cf_template

    
def get_parameters(parameters_file):

    '''
        Read a parameters file and return the contents
    '''

    print("Reading resources from " + parameters_file)
    f = open(parameters_file, "r")
    json_data = f.read()
    cf_parameters = json.loads(json_data)
    
    return cf_parameters
    

def deploy_stack(
    credentials,
    stack_name,
    template,
    parameters_file,
    stack_region):

    '''
        Create a CloudFormation stack of resources within the new account
    '''
    parameters = get_parameters(parameters_file)

    datestamp = time.strftime("%d/%m/%Y")
    client = boto3.client('cloudformation',
                          aws_access_key_id=credentials['AccessKeyId'],
                          aws_secret_access_key=credentials['SecretAccessKey'],
                          aws_session_token=credentials['SessionToken'],
                          region_name=stack_region)
    print("Creating stack " + stack_name + " in " + stack_region)

    creating_stack = True
    while creating_stack is True:
        try:
            creating_stack = False
            create_stack_response = client.create_stack(
                StackName=stack_name,
                TemplateBody=template,
                Parameters=parameters,
                NotificationARNs=[],
                Capabilities=[
                    'CAPABILITY_NAMED_IAM',
                ],
                OnFailure='ROLLBACK',
                EnableTerminationProtection=True,
                Tags=[
                    {
                        'Key': 'ManagedResource',
                        'Value': 'True'
                    },
                    {
                        'Key': 'DeployDate',
                        'Value': datestamp
                    }
                ]
            )
        except botocore.exceptions.ClientError as e:
            if e.response['Error']['Code'] == 'AlreadyExistsException':
                print("Stack already exists: " + stack_name)
                sys.exit(1)
            else:
                creating_stack = True
                print(e)
                print("Retrying...")
                time.sleep(10)

    stack_building = True
    print("Stack creation in process...")
    #print(create_stack_response)
    while stack_building is True:
        event_list = client.describe_stack_events(StackName=stack_name).get("StackEvents")
        stack_event = event_list[0]

        if (stack_event.get('ResourceType') == 'AWS::CloudFormation::Stack' and
           stack_event.get('ResourceStatus') == 'CREATE_COMPLETE'):
            stack_building = False
            print("Stack construction complete.")
        elif (stack_event.get('ResourceType') == 'AWS::CloudFormation::Stack' and
              stack_event.get('ResourceStatus') == 'ROLLBACK_COMPLETE'):
            stack_building = False
            print("Stack construction failed.")
            sys.exit(1)
        else:
            #print(stack_event)
            print("Stack building . . .")
            time.sleep(10)

    stack = client.describe_stacks(StackName=stack_name)
    
    return stack


def main(arguments):

    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter)
        
    parser.add_argument('--stack_name', required=True) 
    parser.add_argument('--template_file', required=True)
    parser.add_argument('--parameters_file', required=True)
    parser.add_argument('--region',
                        default='us-east-1')
    parser.add_argument('--account_name', required=True) 
    parser.add_argument('--account_role', required=True,
                        default='OrganizationAccountAccessRole')
    args = parser.parse_args(arguments)

    account_id = get_account_id(
        args.account_name,
        args.region)
   
    credentials = assume_role(account_id, args.account_role)
        
    print("Deploying resources from " + args.template_file + " as " + args.stack_name + " in " + args.region)
        
    template = get_template(args.template_file)
    stack = deploy_stack(
        credentials,
        args.stack_name,
        template,
        args.parameters_file,
        args.region)
    print(stack)
    print("Resources deployed for account " + account_id)

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
